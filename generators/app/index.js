import Generator from 'yeoman-generator';
import yosay from 'yosay';
import { fileURLToPath } from 'url';
import path from 'path';
import { readFile } from 'fs/promises';
import { askForExtensionName, askForExtensionDescription, askForExtensionPublisher, askForGit, askForInstallDependencies, askForPackageManager } from './prompts.js';
import { generateExtTs } from './generate-ext-ts.js';
import { createSymlink } from './symlink.js';
import dependencyVersions from './deps.js';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

// Read package.json
const packageJson = JSON.parse(await readFile(path.join(__dirname, '../../package.json'), 'utf-8'));
const generatorVersion = packageJson.version;

export default class extends Generator {
  constructor(args, opts) {
    super(args, opts);
    this.option("extensionType", { type: String });
    this.option("extensionName", { type: String });
    this.option("extensionDescription", { type: String });
    this.option("extensionPublisher", { type: String });

    this.extensionConfig = Object.create(null);
    this.extensionGenerator = undefined;
    this.abort = false;
  }

  async initializing() {
    this.log(yosay(`Welcome to the FreeLens Extension Generator v${generatorVersion}`));

    this.extensionConfig.dependencyVersions = dependencyVersions;
    this.extensionConfig.dep = function (name) {
      const version = dependencyVersions[name];
      if (!version) {
        throw new Error(`Module ${name} is not listed in constant dependencyVersions \n ${JSON.stringify(version, null, 2)}`);
      }
      return `"${name}": "${version}"`;
    };
  }

  async prompting() {
    await askForExtensionName(this, this.extensionConfig);
    await askForExtensionDescription(this, this.extensionConfig);
    await askForExtensionPublisher(this, this.extensionConfig);
    await askForGit(this, this.extensionConfig);
    await askForPackageManager(this, this.extensionConfig);
    await askForInstallDependencies(this, this.extensionConfig);
  }

  writing() {
    if (this.abort) {
      return;
    }
    generateExtTs(this, this.extensionConfig);
  }

  install() {
    if (this.abort) {
      return;
    }
    if (this.extensionConfig.installDependencies) {
      this.spawnCommand(this.extensionConfig.pkgManager, ['install'], {
        cwd: this.destinationPath(`./${this.extensionConfig.name}`)
      });
    }
  }

  end() {
    if (this.abort) {
      return;
    }

    if (this.extensionConfig.gitInit) {
      this.spawnCommandSync('git', ['init', '--quiet'], {
        cwd: this.destinationPath(`./${this.extensionConfig.name}`)
      });
      this.spawnCommandSync('git', ['add', '-A'], {
        cwd: this.destinationPath(`./${this.extensionConfig.name}`)
      });
      this.spawnCommandSync('git', ['commit', '-m', `Initial commit ðŸŽ‰, generated by generator-lens-ext v${generatorVersion}`], {
        cwd: this.destinationPath(`./${this.extensionConfig.name}`)
      });
    }

    this.log('\r\n');
    this.log("While developing your extension you should either work directly in '~/.freelens/extensions' or symlink your working directory into that folder");

    this.log('\r\n');
    this.log(`Your extension "${this.extensionConfig.name}" has been created!`);
    this.log(`cd to ${this.extensionConfig.name}, and '${this.extensionConfig.pkgManager} start' to start the development.`);
    this.log('\r\n');

    this.log("Legacy Lens Extension Documentation https://docs.k8slens.dev/latest/extensions/.");
    this.log("FreeLens GitHub https://github.com/freelensapp/freelens");
    this.log('\r\n');
  }
}
